===============
 redirect spec
===============

A basic spec of the objects and pieces involved.

Local Utility
=============

Double head BTree container for managing domain reroutes

    >>> store = RedirectStore('store')
    >>> path_slice = "/path/between/traverser/and/object-of-redirection"
    >>> store[path_slice] = "http://www.newdomain.com" 
    >>> '%s/sub/path' %store.get(path_slice) 
    'http://www.newdomain.com/sub/path'

    >>> del store[path_slice]
    >>> store.get(path_slice) is None
    True

Annotation
==========

Paths to be searched for possible redirects are stored as annotations
on the local utility::

    >>> from opencore.redirect import get_search_paths
    >>> get_search_paths(store)
    []


Traversal adapter
=================
Checks a path agains the annotation and redirects to new domain + subpath.

    >>> store[path_slice] = "http://www.newdomain.com" 
    >>> class SomeObject(object):
    ...     _path = '/path/to/here'
    ...     def getPhysicalPath(self):
    ...         return tuple(self._path.split('/'))

    >>> obj = SomeObject()

Need request.

    >>> SelectiveRedirectTraverser(obj).traverse('/dummy/path', request=request)
    Error

    >>> SelectiveRedirectTraverser(obj).traverse(path_slice)
    <FiveBlahBlah view ...>

    >>> view()
    some indication we are redirecting. might need to inspect request

View
====

Does the response redirect.


Form
====

Purely for TTW testing. Manages redirect data for a project(stores in
redirect utility)

(use plone control panel formlib model here?)




